# python 笔记

- 

## 问题

- 'ab' in 'abc' 到底做了什么
- 鸭子类型：
  - 只要某个对象具有鸭子的方法，可以像鸭子那样走路和嘎嘎叫，那么它就可以被其它函数当做鸭子一样调用。
- 

## 语法

- with open('file.txt') as file
  - 语法糖try except finally，内置两个方法```__enter__,__exit__```
  - ```__enter__ ```:紧跟with后面的语句被求值后，返回对象的“–enter–()”方法被调用，这个方法的返回值将被赋值给as后面的变量；
  - 当with后面的代码块全部被执行完之后，将调用前面返回对象的“–exit–()”方法。

## 函数 、类、方法

- 模块被导入时，会运行一次代码（区分概念：导入时，执行时）

- 闭包：

  - 闭包是一种函数```__closure__```
  - 它会保留定义函数时存在的自由变量的绑定，
  - 这样调用函数时，虽然定义作用域不可用了，但是仍能使用那些绑定。
  - 注意，只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中 的外部变量。
  - nonlocal声明 把变量标记为自由变量

- ```
  装饰器
  def clock(func):
  
  	@functools.wraps(func):
  	def clocked(*args, **kwargs):
  		result = func(*args, **kwargs)
  		```do something```
  		return result
  		
      return clocked
  
  把相关的属性从 func 复制到 clocked 中。 此外，这个新版还能正确处理关键字参数。
  ```

- ```
  @functools.lru_cache
  
  lru 是 ‘LRU最近最长未使用’ 的意思
  这是一项优化技术，它把耗时的函数的结果保存 起来，避免传入相同的参数时重复计算。
  
  
  def lru_cache(maxsize=128, typed=False):
  maxsize 参数指定存储多少个调用的结果。为了性能，maxsize 应该设为 2 的幂
  typed 参数如果设为 True，把不同参数类型得到的结果分开保存，即把通常认为相等的浮点数和整数参数（如 1 和 1.0）区分开。
  
  
  被 lru_cache 装饰的函数，它的所有参数都必须是可散列的。因为 lru_cache 使用字典存储结果，而且键根据调用时传入的定位参数和关键字参数创建
  
  ```

- ```
  @functools.singledispatch
  
  singledispatch不是为了把 Java 的那种方法重载带入Python。在一个类中为同一个方法定义多个重载变体，比在一个函
  数中使用一长串 if/elif/elif/elif 块要更好。但是这两种方案都有缺陷，因为它们让代码单元（类或函数）承担的职责太
  多。@singledispath 的优点是支持模块化扩展：各个模块可以为它支持的各个类型注册一个专门函数。
  ```

- 重载

  - python 不支持重载
    - 参数类型：python 是动态语言
    - 参数数量：缺省函数
  - 不重载返回值：因为计算机无法判定该调用哪个函数

- 





## 集合、列表、字典、元组

- 集合 set() 或 {1}
  
  - ’ - ‘ 、’ | ‘、‘ &’ 、‘^’
  
- 列表相加

  - [].appand([1]) == [[1]]
  - [].extend([1]) == [1]

- 二维矩阵

  - ```text
    [[0 for i in range(m)] for j in range(n)]
    [[0]*3 for _ in range(n)]

    __mul__在list中,表现为把一个序列复制几份然后再拼接起来，根据序列元素类型可以分为两种情况
    1.原子数据类型，[0]*3
    2.对象引用，[ {0,1,2} ]*3, 这个时候是3个同一对象
    ```
    
  - ```text
    np.array([[1, 2, 3], [4, 5, 6]])
    ```

  - ```text
    # 创建一个 3x4 的数组且所有值全为 0
    x3 = np.zeros((3, 4), dtype=int)
    print(x3)
    # 创建一个 3x4 的数组且所有元素值全为 1
    x4 = np.ones((3, 4), dtype=int)
    print(x4)
    # 创建一个 3x4 的数组，然后将所有元素的值填充为 2
    x5 = np.full((3, 4), 2, dtype=int)
    print(x5)
    ```

- 默认操作的字典 nums = defaultdict(list)

- reversed()

  - reversed把序列反转，最后生成生成器对象

  - reversed()方法调用对象中__ reversed __方法

  - ```python
    name ="beimenchuixue"
    print(next(reversed(name)))== 'e'
    ```

- 拷贝

  - dict.copy() 浅拷贝
  - copy.deepcopy(dict)  深拷贝

- 集合的本质是许多唯一对象的聚集。因此，集合可以用于去重

- 字典代理

  ``````python
  >>> from types import MappingProxyType 
  >>> d = {1:'A'} 
  >>> d_proxy = MappingProxyType(d)
  ``````

  - d 中的内容可以通过 d_proxy 看到。
  -  但是通过 d_proxy 并不能做任何修改。
  - d_proxy 是动态的，也就是说对 d 所做的任何改动都会反馈到它上 面。

- 散列

  - 散列可以理解为”把序列散开“，不会出现两个不同元素分不开的情况
  - 可散列对象：如果一个对象的哈希值在其生命周期内永远不会改变（它需要一个`__hash__()`方法），并且可以与其他对象进行比较（它需要一个`__eq__()`or`__cmp__()`方法），那么它就是可散列的。比较相等的可散列对象必须具有相同的散列值。
  - Python 的所有不可变内置对象都是可散列的，而没有可变容器（例如列表或字典）是可散列的。默认情况下，作为用户定义类实例的对象是可散列的；它们都比较不相等，它们的哈希值是它们的`id()`.

- 元组推导 tuple(x for x in [1,2,3]) ，注意要加tuple，因为括号和推导语义冲突了，所以严格来说没有元组推导

- dict 和 set 是不同的实现，

  - dict是有序的（3.6之后）
  - set是无序的
  
- zip('abc','1234') =  [(a,b) for (a,b) in zip('abc','1234')] = [('a', '1'), ('b', '2'), ('c', '3')]

- ```python
  () 在单元素时，表现为分组，而不是定义元组，这常会导致传参的时候不注意被坑
  
  >>> type( (2) )
  <class 'int'>
  >>> type( (2,))
  <class 'tuple'>
  
  >> cursor.execute('INSERT INTO images VALUES(?)', (img,)) 这是可以的
  >> cursor.execute('INSERT INTO images VALUES(?)', (img)) 
  这会报错，The current statement uses 1, and there are 74 supplied
  
  ```

## 循环，遍历，枚举

- 倒序 ： range( : :-1)

- range(0,n) == range(n) == range(0,n,1)

- 遍历id和值： for id,val in enumerate(nums):  

  - ```python
    enumerate is useful for obtaining an indexed list:
        (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
    ```

- 测试小代码片段的运行时间  timeit.timeit(stmt='',number=4)



## 数字、数据、计算

- 异或 1^0 == 1     True^False == True

- List[] 的加减乘除 不同于 array[]的加减乘除

- gcd 最大公约数： 

  - a / b = q .... r

  - 定理：gcd(a,b) == gcd(b,r)

  - ```python 
    def gcd(a,b):#约定a>b
        if b == 0:return a
        return gcd(b,a%b)
    ```

- 随机数

  ```python
  #1、random.randint(low, hight) -> 返回一个位于[low,hight]之间的整数
  >>> random.randint(1,10)
  6
  
  #2、random.random() -> 不接受参数，返回一个[0.0, 1.0)之间的浮点数
  >>> random.random()
  0.5885821552646049
  
  #3、random.uniform(val1, val2) -> 接受两个数字参数，返回两个数字区间的一个浮点数，不要求val1小于等于val2
  >>> random.uniform(1,5.0)
  4.485403087612088
  
  # 4、random.randrange(start, stop, step) -> 返回以start开始，stop结束，step为步长的列表中的随机整数，同样，三个参数均为整数（或者小数位为0），若start大于stop时 ，setp必须为负数.step不能是0.*
  >>> random.randrange(1, 100, 2)  #返回[1,100]之间的奇数
  19
  >>> random.ranrange(100, 1, -2)  #返回[100,1]之间的偶数
  2
  
  ```

  ```python
  # 生成随机数组
  import numpy as np
  
  #1、np.random.rand 用于生成[0.0, 1.0)之间的随机浮点数，
  >>> np.random.rand(10)
  array([ 0.56911206, 0.99777291, 0.18943144, 0.19387287, 0.75090637,
      0.18692814, 0.69804514, 0.48808425, 0.79440667, 0.66959075])        
  
  #2、np.random.randn该函数返回一个样本，具有标准正态分布。
  >>> np.random.randn(10)
  array([-1.6765704 , 0.66361856, 0.04029481, 1.19965741, -0.57514593,
      -0.79603968, 1.52261545, -2.17401814, 0.86671727, -1.17945975])
  
  #3、np.random.randint(low[, high, size]) 返回随机的整数，位于半开区间 [low, high)。
  >>> np.random.randint(10,size=10)
  array([4, 1, 4, 3, 8, 2, 8, 5, 8, 9])
  
  #4、np.random.shuffle(x) 类似洗牌，打乱顺序；
  >>> arr = np.arange(10)
  >>> np.random.shuffle(arr)
  >>> arr
  [1 7 5 2 9 4 3 6 0 8]
  
  #5、np.random.permutation(x)返回一个随机排列
  >>>> np.random.permutation(10)
  array([1, 7, 4, 3, 0, 9, 2, 5, 8, 6])
  ```





## 字符、字母、字符串	

- chr(97) == 'a'  

- ord('a') == 97

- 'ab' in  'abc'

- str 类型不可变，str[0] = str[-1]是不支持的

- str反转：'word'[::-1]=='drow'

- Counter

  - ```
    >>> ct = collections.Counter('abracadabra')
    >>> ct
    Counter({'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1})
    >>> ct.update('aaaaazzz')
    >>> ct
    Counter({'a': 10, 'z': 3, 'b': 2, 'r': 2, 'c': 1, 'd': 1})
    >>> ct.most_common(2)
    [('a', 10), ('z', 3)]
    
    ```

- 



## 算法

- 搜索：
  - BFS最短路
  - DFS连通块
- 



## 排序

- List.sort(key=xxx,reverse=True) 本地排序
- sorted(list, key=xxx, reverse = True)  return new List



## 二分查找

- bisect.bisect_left(a,x)　：
  - a[0,l) < x            
  - a[l,n) >= x         
  - if a[mid] < x : l =mid+1
  - if a[mid] >=x : r = mid
- bisect.bisect_right()
  - a[0,l) <= x       
  - a[l,n) > x          
  - if a[mid] <= x : l = mid+1
  - if a[mid] > x :  r =mid



四种查找方式

​	![](http://tva1.sinaimg.cn/large/006fuBezly1gyyb7ir54xj30t80hkteh.jpg)

	1.  找到第一个 >= 5 的元素    bisect_left(5)
	2.  找到最后一个<5 的元素     bisect_left(5) -1
	3.  找到第一个 >5    的元素     bisect_right(5) 
	4.  找到最后一个<=5的元素    bisect_right(5)-1



## 快捷键

- ctrl + Q 快速文档